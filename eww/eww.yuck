(defwindow powermenu
    :monitor 0
    :geometry (geometry
        :width "100%"
        :height "100%")
    :stacking "bg"
    :exclusive false
    (powermenu_layout))

(defpoll hour
    :interval "5s"
    :initial `date '+%H'`
    `date '+%H'`)
(defpoll wttr
    :interval "1h"
    `curl wttr.in/?format=1 | sed 's/  //'`)
(defvar clockHover false)

(defwidget powermenu_layout []
    (box
        :class "layout-box"
        :space-evenly false
        :orientation "vertical"
        (box
            :valign "start"
            :space-evenly false
            :spacing 25
            (_sundial)
            (_forecast))
        (box
            :space-evenly false
            :hexpand true
            :vexpand true
            (box
                :spacing 30
                :class "clock-box"
                :space-evenly false
                :valign "end"
                :halign "start"
                (_idle)
                (_clock))
            (_buttons
                :shutdown "poweroff"
                :shutdown_icon "󰐥"
                :reboot "reboot"
                :reboot_icon "󰜉"
                :logout "loginctl kill-session self"
                :logout_icon "󰍃"))))

(defwidget _sundial []
    (label
        :class "sundial-lbl"
        :halign "end"
        :hexpand true
        :text { hour >= 22 ? "Night" :
                hour >= 19 ? "Early Night" :
                hour == 18 ? "Dusk" :
                hour >= 16 ? "Evening" :
                hour >= 13 ? "Afternoon" :
                hour == 12 ? "Noon" :
                hour >= 10 ? "Late Morning" :
                hour >= 07 ? "Early Morning" :
                hour == 06 ? "Dawn" :
                hour >= 01 ? "Late Night" :
                "Midnight" }))

(defwidget _forecast []
    (box
        :class "wttr-box"
        wttr))

(defwidget _idle []
    (box
        (checkbox
            :onchecked "systemctl --user start idle-inhibitor"
            :onunchecked "systemctl --user stop idle-inhibitor"
            { ( hour == 13 || hour == 01 ) ? "󱑋" :
              ( hour == 14 || hour == 02 ) ? "󱑌" :
              ( hour == 15 || hour == 03 ) ? "󱑍" :
              ( hour == 16 || hour == 04 ) ? "󱑎" :
              ( hour == 17 || hour == 05 ) ? "󱑏" :
              ( hour == 18 || hour == 06 ) ? "󱑐" :
              ( hour == 19 || hour == 07 ) ? "󱑑" :
              ( hour == 20 || hour == 08 ) ? "󱑒" :
              ( hour == 21 || hour == 09 ) ? "󱑓" :
              ( hour == 22 || hour == 10 ) ? "󱑔" :
              ( hour == 23 || hour == 11 ) ? "󱑕" :
              "󱑖" })))

(defwidget _clock []
    (eventbox
        :onhover "${EWW_CMD} update clockHover=true"
        :onhoverlost "${EWW_CMD} update clockHover=false"
        { formattime(EWW_TIME, clockHover ? "%a, %h %d, %Y" : "%H %M") }))

(defwidget _buttons [shutdown shutdown_icon reboot
                    reboot_icon logout logout_icon]
    (box
        :class "btns-box"
        :spacing 5
        :vexpand true
        :hexpand true
        :valign "end"
        :halign "end"
        :space-evenly false
        (button :onclick shutdown shutdown_icon)
        (button :onclick reboot reboot_icon)
        (button :onclick logout logout_icon)))
