# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[mgr]
keymap = [
    { on = "<Esc>", run = "escape", desc = "Exit visual mode, clear selected, or cancel search" },
    { on = "q",     run = "quit",   desc = "Exit the process" },
    { on = "<C-c>", run = "close",  desc = "Close the current tab, or quit if it's last" },

    # Hopping
    { on = "k", run = "arrow prev", desc = "Move cursor up" },
    { on = "j", run = "arrow next", desc = "Move cursor down" },

    { on = "<C-u>", run = "arrow -50%",     desc = "Move cursor up half page" },
    { on = "<C-d>", run = "arrow 50%",      desc = "Move cursor down half page" },
    { on = "<C-b>", run = "arrow -100%",    desc = "Move cursor up one page" },
    { on = "<C-f>", run = "arrow 100%",     desc = "Move cursor down one page" },

    { on = [ "g", "g" ],    run = "arrow top",  desc = "Move cursor to the top" },
    { on = "G",             run = "arrow bot",  desc = "Move cursor to the bottom" },

    # Navigation
    { on = "h", run = "leave",  desc = "Go back to the parent directory" },
    { on = "l", run = "enter",  desc = "Enter the child directory" },

    # Toggle
    { on = "<Space>",   run = [ "toggle", "arrow next" ],  desc = "Toggle the current selection state" },
    { on = "<C-a>",     run = "toggle_all --state=on",  desc = "Select all files" },
    { on = "<C-r>",     run = "toggle_all",             desc = "Remove selection of all files" },

    # Visual mode
    { on = "v", run = "visual_mode",            desc = "Enter visual mode (selection mode)" },
    { on = "V", run = "visual_mode --unset",    desc = "Enter visual mode (unset mode)" },

    # Seeking
    { on = "<C-p>", run = "seek -5",    desc = "Seek up 5 units in the preview" },
    { on = "<C-n>", run = "seek 5",     desc = "Seek down 5 units in the preview" },

    # Spotting
    { on = "<Tab>", run = "spot",   desc = "Spot hovered file" },

    # Operation
    { on = "o",     run = "open",                           desc = "Open selected files" },
    { on = "O",     run = "open --interactive",             desc = "Open selected files interactively" },
    { on = "y",     run = "yank",                           desc = "Yank selected files (copy)" },
    { on = "Y",     run = "yank --cut",                     desc = "Yank selected files (cut)" },
    { on = "p",     run = "paste",                          desc = "Paste yanked files" },
    { on = "P",     run = "paste --force",                  desc = "Paste yanked files (overwrite if the destination exists)" },
    { on = "-",     run = "link",                           desc = "Symlink the absolute path of yanked file" },
    { on = "<C-->", run = "hardlink",                       desc = "Hardlink yanked files" },
    { on = "<C-y>", run = "unyank",                         desc = "Cancel the yank status" },
    { on = "d",     run = "remove",                         desc = "Trash selected files" },
    { on = "D",     run = "remove --permanently",           desc = "Permanently delete selected files" },
    { on = "a",     run = "create",                         desc = "Create a file (ends with / for directories)" },
    { on = "r",     run = "rename --cursor=before_ext",     desc = "Rename selected file(s)" },
    { on = ";",     run = "shell --interactive",            desc = "Run a shell command" },
    { on = ":",     run = "shell --block --interactive",    desc = "Run a shell command (block until finishes)" },
    { on = ".",     run = "hidden toggle",                  desc = "Toggle the visibility of hidden files" },
    { on = "s",     run = "search --via=fd",                desc = "Search files by name using fd" },
    { on = "S",     run = "search --via=rg",                desc = "Search files by content using ripgrep" },
    { on = "<C-s>", run = "escape --search",                desc = "Cancel the ongoing search" },
    { on = "Z",     run = "plugin fzf",                     desc = "Jump to a directory or reveal a file using fzf" },

    # Linemode
    { on = [ "m", "s" ],    run = "linemode size",          desc = "Set linemode to size" },
    { on = [ "m", "p" ],    run = "linemode permissions",   desc = "Set linemode to permissions" },
    { on = [ "m", "c" ],    run = "linemode ctime",         desc = "Set linemode to ctime" },
    { on = [ "m", "m" ],    run = "linemode mtime",         desc = "Set linemode to mtime" },
    { on = [ "m", "o" ],    run = "linemode owner",         desc = "Set linemode to owner" },
    { on = [ "m", "n" ],    run = "linemode none",          desc = "Set linemode to none" },

    # Copy
    { on = [ "c", "c" ],    run = "copy path",              desc = "Copy the file path" },
    { on = [ "c", "d" ],    run = "copy dirname",           desc = "Copy the directory path" },
    { on = [ "c", "f" ],    run = "copy filename",          desc = "Copy the filename" },
    { on = [ "c", "n" ],    run = "copy name_without_ext",  desc = "Copy the filename without extension" },

    # Filter
    { on = "f", run = "filter --smart", desc = "Filter files" },

    # Find
    { on = "/", run = "find --smart",               desc = "Find next file" },
    { on = "?", run = "find --previous --smart",    desc = "Find previous file" },
    { on = "n", run = "find_arrow",                 desc = "Go to the next found" },
    { on = "N", run = "find_arrow --previous",      desc = "Go to the previous found" },

    # Sorting
    { on = [ ",", "m" ],    run = [ "sort mtime --reverse=no", "linemode mtime" ],  desc = "Sort by modified time" },
    { on = [ ",", "M" ],    run = [ "sort mtime --reverse", "linemode mtime" ],     desc = "Sort by modified time (reverse)" },
    { on = [ ",", "c" ],    run = [ "sort btime --reverse=no", "linemode ctime" ],  desc = "Sort by created time" },
    { on = [ ",", "C" ],    run = [ "sort btime --reverse", "linemode ctime" ],     desc = "Sort by created time (reverse)" },
    { on = [ ",", "e" ],    run = "sort extension --reverse=no",                    desc = "Sort by extension" },
    { on = [ ",", "E" ],    run = "sort extension --reverse",                       desc = "Sort by extension (reverse)" },
    { on = [ ",", "a" ],    run = "sort alphabetical --reverse=no",                 desc = "Sort alphabetically" },
    { on = [ ",", "A" ],    run = "sort alphabetical --reverse",                    desc = "Sort alphabetically (reverse)" },
    { on = [ ",", "n" ],    run = "sort natural --reverse=no",                      desc = "Sort naturally" },
    { on = [ ",", "N" ],    run = "sort natural --reverse",                         desc = "Sort naturally (reverse)" },
    { on = [ ",", "s" ],    run = [ "sort size --reverse=no", "linemode size" ],    desc = "Sort by size" },
    { on = [ ",", "S" ],    run = [ "sort size --reverse", "linemode size" ],       desc = "Sort by size (reverse)" },
    { on = [ ",", "r" ],    run = "sort random --reverse=no",                       desc = "Sort randomly" },

    # Goto
    { on = [ "g", "h" ],        run = "cd ~",               desc = "Go to the home directory" },
    { on = [ "g", "c" ],        run = "cd ~/.config",       desc = "Go to the config directory" },
    { on = [ "g", "d" ],        run = "cd ~/Downloads",     desc = "Go to the downloads directory" },
    { on = [ "g", "<Space>" ],  run = "cd --interactive",   desc = "Go to a directory interactively" },
    { on = [ "g", "f" ],        run = "follow",             desc = "Follow hovered symlink" },
    { on = [ "g", "e" ],        run = "cd /etc",            desc = "Go to the system's config directory" },
    { on = [ "g", "m" ],        run = "cd /media",          desc = "Go to USB mount directory" },

    # Tabs
    { on = "t", run = "tab_create --current",       desc = "Create a new tab with CWD" },
    { on = "[", run = "tab_switch -1 --relative",   desc = "Switch to the previous tab" },
    { on = "]", run = "tab_switch 1 --relative",    desc = "Switch to the next tab" },

    # Tasks
    { on = "w", run = "tasks:show", desc = "Show task manager" },

    # Help
    { on = "~",     run = "help",   desc = "Open help" },
    { on = "<F1>",  run = "help",   desc = "Open help" },
]

[tasks]
keymap = [
    { on = "<Esc>", run = "close",  desc = "Close task manager" },

    { on = "k", run = "arrow prev", desc = "Move cursor up" },
    { on = "j", run = "arrow next", desc = "Move cursor down" },

    { on = "o", run = "inspect",    desc = "Inspect the task" },
    { on = "x", run = "cancel",     desc = "Cancel the task" },

    # Help
    { on = "~",     run = "help",   desc = "Open help" },
    { on = "<F1>",  run = "help",   desc = "Open help" },
]

[spot]
keymap = [
    { on = "<Esc>", run = "close",  desc = "Close the spot" },

    { on = "k", run = "arrow prev", desc = "Move cursor up" },
    { on = "j", run = "arrow next", desc = "Move cursor down" },

    { on = "h", run = "swipe prev", desc = "Swipe to previous file" },
    { on = "l", run = "swipe next", desc = "Swipe to next file" },

    # Copy
    { on = [ "c", "c" ],    run = "copy cell",  desc = "Copy selected cell" },

    # Help
    { on = "~",     run = "help",   desc = "Open help" },
    { on = "<F1>",  run = "help",   desc = "Open help" },
]

[pick]
keymap = [
    { on = "<Esc>", run = "close",          desc = "Cancel pick" },
    { on = "o",     run = "close --submit", desc = "Submit the pick" },

    { on = "k", run = "arrow prev", desc = "Move cursor up" },
    { on = "j", run = "arrow next", desc = "Move cursor down" },

    # Help
    { on = "~",     run = "help",   desc = "Open help" },
    { on = "<F1>",  run = "help",   desc = "Open help" },
]

[input]
keymap = [
    { on = "<Esc>",     run = "escape",         desc = "Go back the normal mode, or cancel input" },
    { on = "<Enter>",   run = "close --submit", desc = "Submit the input" },

    # Mode
    { on = "i", run = "insert",                             desc = "Enter insert mode" },
    { on = "I", run = [ "move first-char", "insert" ],      desc = "Move to the BOL, and enter insert mode" },
    { on = "a", run = "insert --append",                    desc = "Enter append mode" },
    { on = "A", run = [ "move eol", "insert --append" ],    desc = "Move to the EOL, and enter append mode" },
    { on = "v", run = "visual",                             desc = "Enter visual mode" },
    { on = "V", run = [ "move bol", "visual", "move eol" ], desc = "Enter visual mode and select all" },
    { on = "r", run = "replace",                            desc = "Replace a single character" },

    # Character-wise movement
    { on = "h", run = "move -1",    desc = "Move back a character" },
    { on = "l", run = "move 1",     desc = "Move forward a character" },

    # Word-wise movement
    { on = "b", run = "backward",                       desc = "Move back to the start of the current or previous word" },
    { on = "B", run = "backward --far",                 desc = "Move back to the start of the current or previous WORD" },
    { on = "w", run = "forward",                        desc = "Move forward to the start of the next word" },
    { on = "W", run = "forward --far",                  desc = "Move forward to the start of the next WORD" },
    { on = "e", run = "forward --end-of-word",          desc = "Move forward to the end of the current or next word" },
    { on = "E", run = "forward --far --end-of-word",    desc = "Move forward to the end of the current or next WORD" },

    # Line-wise movement
    { on = "0", run = "move bol",           desc = "Move to the BOL" },
    { on = "$", run = "move eol",           desc = "Move to the EOL" },
    { on = "_", run = "move first-char",    desc = "Move to the first non-whitespace character" },
    { on = "^", run = "move first-char",    desc = "Move to the first non-whitespace character" },

    # Delete
    { on = "<Backspace>",   run = "backspace",          desc = "Delete the character before the cursor" },
    { on = "<Delete>",      run = "backspace --under",  desc = "Delete the character under the cursor" },

    # Kill
    { on = "<C-u>", run = "kill bol",       desc = "Kill backwards to the BOL" },
    { on = "<C-k>", run = "kill eol",       desc = "Kill forwards to the EOL" },
    { on = "<C-w>", run = "kill backward",  desc = "Kill backwards to the start of the current word" },
    { on = "<A-d>", run = "kill forward",   desc = "Kill forwards to the end of the current word" },

    # Cut/Yank/Paste
    { on = "d", run = "delete --cut",                               desc = "Cut the selected characters" },
    { on = "D", run = [ "delete --cut", "move eol" ],               desc = "Cut until the EOL" },
    { on = "c", run = "delete --cut --insert",                      desc = "Cut the selected characters, and enter insert mode" },
    { on = "C", run = [ "delete --cut --insert", "move eol" ],      desc = "Cut until the EOL, and enter insert mode" },
    { on = "x", run = [ "delete --cut", "move 1 --in-operating" ],  desc = "Cut the current character" },
    { on = "y", run = "yank",                                       desc = "Copy the selected characters" },
    { on = "p", run = "paste",                                      desc = "Paste the copied characters after the cursor" },
    { on = "P", run = "paste --before",                             desc = "Paste the copied characters before the cursor" },

    # Undo/Redo
    { on = "u",     run = "undo",   desc = "Undo the last operation" },
    { on = "<C-r>", run = "redo",   desc = "Redo the last operation" },

    # Help
    { on = "~",     run = "help",   desc = "Open help" },
    { on = "<F1>",  run = "help",   desc = "Open help" },
]

[confirm]
keymap = [
    { on = "<Esc>", run = "close",          desc = "Cancel the confirm" },
    { on = "o",     run = "close --submit", desc = "Submit the confirm" },

    { on = "n", run = "close",          desc = "Cancel the confirm" },
    { on = "y", run = "close --submit", desc = "Submit the confirm" },

    { on = "k", run = "arrow prev", desc = "Move cursor up" },
    { on = "j", run = "arrow next", desc = "Move cursor down" },

    # Help
    { on = "~",     run = "help",   desc = "Open help" },
    { on = "<F1>",  run = "help",   desc = "Open help" },
]

[cmp]
keymap = [
    { on = "<Esc>",     run = "close",                                      desc = "Cancel completion" },
    { on = "<Tab>",     run = "close --submit",                             desc = "Submit the completion" },
    { on = "<Enter>",   run = [ "close --submit", "input:close --submit" ], desc = "Submit the completion and input" },

    { on = "<C-p>", run = "arrow prev", desc = "Move cursor up" },
    { on = "<C-n>", run = "arrow next", desc = "Move cursor down" },

    # Help
    { on = "~",     run = "help",   desc = "Open help" },
    { on = "<F1>",  run = "help",   desc = "Open help" },
]

[help]
keymap = [
    { on = "<Esc>", run = "escape", desc = "Clear the filter, or hide the help" },

    # Navigation
    { on = "k", run = "arrow prev", desc = "Move cursor up" },
    { on = "j", run = "arrow next", desc = "Move cursor down" },

    # Filtering
    { on = "f", run = "filter", desc = "Apply a filter for the help items" },
]
