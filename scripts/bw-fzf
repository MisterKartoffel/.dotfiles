#!/usr/bin/env bash
#
# Mostly taken from https://github.com/radityaharya/bw-fzf
# with some changes for my use case

trap 'exit_handler' INT TERM
trap 'cleanup' EXIT

ITEMS=
TIMEOUT=60s
SEARCH_TERM=
TIMEOUT_PID=
TIMESTAMP_FILE="/tmp/bw-fzf-active.timestamp"
TEMP_ITEMS_FILE=
CLIP_COMMAND="wl-copy"
CLIP_ARGS="-o"

function exit_handler() {
    trap - INT TERM
    cleanup
    exit 1
}

function cleanup() {
    if [[ -n "$TIMEOUT_PID" ]]; then
        kill "$TIMEOUT_PID" 2>/dev/null || true
        wait "$TIMEOUT_PID" 2>/dev/null || true
    fi

    rm -f "$TIMESTAMP_FILE" 2>/dev/null
    rm -f "$TEMP_ITEMS_FILE" 2>/dev/null

    pkill -P $$ 2>/dev/null || true
    wait 2>/dev/null || true
}

function monitor_inactivity() {
    rm -f "$TIMESTAMP_FILE"
    touch "$TIMESTAMP_FILE"
    while true; do
        sleep 1
        if [[ -f "$TIMESTAMP_FILE" ]]; then
            if [[ $(("$(date +%s)" - "$(stat -c %Y "$TIMESTAMP_FILE")")) -ge ${TIMEOUT%s} ]]; then
                echo -e "\nSession timed out after ${TIMEOUT}"
                cleanup
                exit 1
            fi
        fi
    done &
    TIMEOUT_PID=$!
}

function handle_session() {
    local session
    session=$(bw unlock --raw --passwordenv BW_PASSWORD 2>/dev/null)
    if [[ -z "$session" ]]; then
        echo "Could not unlock vault."
        exit 1
    fi

    export BW_SESSION="$session"
    echo "Unlocked!"
}

function check_credentials() {
    if [[ -z "$BW_PASSWORD" ]]; then
        echo "Password environment variable not set."
        exit 1
    fi

    handle_session
}

function check_session() {
    if [[ -n "${BW_SESSION}" ]]; then
        if bw unlock --check --quiet 2>/dev/null; then
            echo "Using existing session from environment."
            return 0
        fi
    fi

    check_credentials
}

function load_items() {
    local search_term="$1"
    echo "Loading items..."
    if [[ -n "$search_term" ]]; then
        if ! ITEMS=$(bw list items --search "$search_term" --session "$BW_SESSION" 2>/dev/null); then
            echo "Could not load items or operation timed out."
            exit 1
        fi
    else
        if ! ITEMS=$(bw list items --session "$BW_SESSION" 2>/dev/null); then
            echo "Could not load items or operation timed out."
            exit 1
        fi
    fi
    echo "Items loaded successfully."
}

export -f monitor_inactivity

function bw_list() {
    local prompt

    TEMP_ITEMS_FILE=$(mktemp)
    echo "$ITEMS" > "$TEMP_ITEMS_FILE"
    chmod 600 "$TEMP_ITEMS_FILE"

    if [ -n "$SEARCH_TERM" ]; then
        prompt="bw-fzf (filter: $SEARCH_TERM) ➜ "
    else
        prompt="bw-fzf ➜ "
    fi

    monitor_inactivity

    # Define help text as a variable
    local HELP_TEXT="
    Keyboard Shortcuts:
    ------------------
    ctrl-f        Show this help window
    ctrl-u        Copy username to clipboard
    ctrl-p        Copy password to clipboard
    ctrl-o        Copy TOTP code to clipboard

    Navigation:
    ----------
    ↑/↓          Select item
    Enter        Select item
    Page Up/Down Scroll preview window
    /            Filter items
    ESC          Clear filter/Exit

    Tips:
    -----
    • Type to filter entries
    • All copied items go to system clipboard
    • Session times out after ${TIMEOUT} of inactivity
    "

    local fzf_args=(
        --cycle
        --inline-info
        --ansi
        --no-mouse
        --layout=reverse
        --prompt="$prompt"
        --bind="change:execute-silent(touch $TIMESTAMP_FILE)"
        --bind="focus:execute-silent(touch $TIMESTAMP_FILE)"
        --bind="ctrl-u:execute(item_id=\$(echo {} | sed -n 's/.*(\(.*\)).*/\1/p'); username=\$(jq -r --arg id \"\$item_id\" '.[] | select(.id == \$id) | .login.username' \"$TEMP_ITEMS_FILE\"); echo -n \"\$username\" | $CLIP_COMMAND $CLIP_ARGS)+execute-silent(touch $TIMESTAMP_FILE)"
        --bind="ctrl-p:execute(item_id=\$(echo {} | sed -n 's/.*(\(.*\)).*/\1/p'); password=\$(jq -r --arg id \"\$item_id\" '.[] | select(.id == \$id) | .login.password' \"$TEMP_ITEMS_FILE\"); echo -n \"\$password\" | $CLIP_COMMAND $CLIP_ARGS)+execute-silent(touch $TIMESTAMP_FILE)"
        --bind="ctrl-o:execute(item_id=\$(echo {} | sed -n 's/.*(\(.*\)).*/\1/p'); totp_secret=\$(jq -r --arg id \"\$item_id\" '.[] | select(.id == \$id) | .login.totp' \"$TEMP_ITEMS_FILE\"); if [[ \"\$totp_secret\" != \"null\" ]]; then totp=\$(oathtool --totp -b \"\$totp_secret\"); echo -n \"\$totp\" | $CLIP_COMMAND $CLIP_ARGS; else echo \"No TOTP available for this item\"; fi)+execute-silent(touch $TIMESTAMP_FILE)"
        --bind="ctrl-f:preview(echo \"$HELP_TEXT\")"
        --header="Press ctrl-f for help"
        --preview-window="right:50%"
        --preview='
        if [[ "{}" == "HELP" ]]; then
            echo "'"$HELP_TEXT"'"
        else
            item_id=$(echo {} | sed -n "s/.*(\(.*\)).*/\1/p")
            touch '"$TIMESTAMP_FILE"'
            item=$(jq -r --arg id "$item_id" ".[] | select(.id == \$id)" "'"$TEMP_ITEMS_FILE"'")

            username=$(jq -r ".login.username" <<< $item)
            notes=$(jq -r ".notes // empty" <<< $item)
            creationDate=$(jq -r ".creationDate" <<< $item)
            revisionDate=$(jq -r ".revisionDate" <<< $item)
            uris=$(jq -r ".login.uris[]?.uri // empty" <<< "$item" | sed "s/^/  • /")

            password_available=$(jq -r ".login.password != null" <<< $item)
            if [ "$password_available" = "true" ]; then
                password="[Press Ctrl+p to copy password]"
            else
                password="null"
            fi

            totp_available=$(jq -r ".login.totp != null" <<< $item)
            if [ "$totp_available" = "true" ]; then
                totp="[Press Ctrl+o to copy TOTP]"
            else
                totp="null"
            fi

            bold=$(tput bold)
            normal=$(tput sgr0)
            cyan=$(tput setaf 6)
            underline=$(tput smul)
            nounderline=$(tput rmul)
            padding="  "

            printf "\n${padding}${bold}${underline}Login Details${nounderline}${normal}\n\n"
            printf "${padding}${bold}${cyan}Username${normal}\n${padding}  %s\n\n" "$username"
            printf "${padding}${bold}${cyan}Password${normal}\n${padding}  %s\n\n" "$password"
            printf "${padding}${bold}${cyan}TOTP${normal}\n${padding}  %s\n\n" "$totp"
            printf "${padding}${bold}${cyan}Notes${normal}\n${padding}  %s\n\n" "$notes"
            printf "${padding}${bold}${cyan}URIs${normal}\n%s\n\n" "$uris"
            printf "${padding}${bold}${cyan}Created${normal}\n${padding}  %s\n" "$creationDate"
            printf "${padding}${bold}${cyan}Modified${normal}\n${padding}  %s\n" "$revisionDate"
        fi
        '
    )

    jq -r '.[] | "\(.name) (\(.id)) \(.login.username)"' "$TEMP_ITEMS_FILE" |
        FZF_PREVIEW_FILE="$TEMP_ITEMS_FILE" fzf "${fzf_args[@]}"
    }

function help() {
    echo "bw-fzf - A Bitwarden cli wrapper with fzf"
    echo "Project url: https://github.com/radityaharya/bw-fzf"
    echo "Author: Raditya Harya <contact@radityaharya.com>"
    echo
    echo "Usage: bw-fzf [OPTIONS]"
    echo
    echo "Options:"
    echo "  -h, --help       Show this help message"
    echo "  -t, --timeout    Set custom timeout (e.g., 30s, 1m). Default is 1 minute."
    echo "  -s, --search     Search term to filter items"
    echo
}

function main() {
    while [[ "$1" != "" ]]; do
        case $1 in
            -h | --help)
                help
                exit 0
                ;;
            -t | --timeout)
                shift
                TIMEOUT="$1"
                ;;
            -s | --search)
                shift
                SEARCH_TERM="$1"
                ;;
            *)
                echo "Invalid option: $1"
                help
                exit 1
                ;;
        esac
        shift
    done

    if ! command -v bw >/dev/null; then
        echo "Bitwarden CLI is missing. Exiting."
        exit 1
    fi

    if ! command -v jq >/dev/null; then
        echo "jq is missing. Exiting."
        exit 1
    fi

    if ! command -v fzf >/dev/null; then
        echo "fzf is missing. Exiting."
        exit 1
    fi

    if ! command -v oathtool >/dev/null; then
        echo "oath-toolkit is missing. Exiting."
        exit 1
    fi

    if ! command -v $CLIP_COMMAND >/dev/null; then
        echo "WARNING: $CLIP_COMMAND is missing. Copy functionality will be unavailable"
    fi

    monitor_inactivity

    check_session
    load_items "$SEARCH_TERM"
    bw_list
}

main "$@"
