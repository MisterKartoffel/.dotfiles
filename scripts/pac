#!/usr/bin/env bash
# Rudimentary fzf menu for pacman

trap 'exit_handler' INT TERM
trap 'cleanup' EXIT

function exit_handler() {
    trap - INT TERM
    cleanup
    exit 1
}

function cleanup() {
    rm -f "${FILES[@]}" 2>/dev/null

    pkill -P $$ 2>/dev/null || true
    wait 2>/dev/null || true
}

declare -i START_MODE=0
declare -rA FILES=(
    ["installed"]="/tmp/fzf_installed.txt"
    ["repos"]="/tmp/fzf_repos.txt"
    ["aur"]="/tmp/fzf_aur.txt"
    ["mode"]="/tmp/fzf_mode.txt"
)

declare -a FZF_ARGS=(
    --no-mouse
    --multi
    --reverse
    --info="inline-right"
    --border="rounded"
    --border-label="⎸ pacman ⎹"
    --prompt=": "
    --input-border="rounded"
    --input-label="⎸ [core] and [extra] ⎹"
    --list-border="rounded"
    --list-label=""
    --preview=""
    --preview-label="⎸ 'amd-ucode' ⎹"
    --preview-border="rounded"
    --footer-label="⎸ Selected packages ⎹"
    --footer-border="rounded"
    --bind="ctrl-f:reload(
                MODE=\$(<\"/tmp/fzf_mode.txt\")
                case \$MODE in
                    0) cat /tmp/fzf_repos.txt ;;
                    1) cat /tmp/fzf_aur.txt ;;
                    2) cat /tmp/fzf_installed.txt ;;
                esac
            )+transform-input-label(
                MODE=\$(<\"/tmp/fzf_mode.txt\")
                case \$MODE in
                    0) echo \"⎸ AUR ⎹\" ;;
                    1) echo \"⎸ Uninstall ⎹\" ;;
                    2) echo \"⎸ [core] and [extra] ⎹\" ;;
                esac
                MODE=\$(( (MODE + 1) % 3 ))
                echo \$MODE > /tmp/fzf_mode.txt
            )"
    --bind="result:transform-list-label(if [[ -n \$FZF_QUERY ]]; then echo \"⎸ \$FZF_MATCH_COUNT matches for [\$FZF_QUERY] ⎹\"; else echo \"\"; fi)"
    --bind="multi:transform-footer( if [[ \$FZF_SELECT_COUNT -ge 1 ]]; then \$HOME/.config/scripts/helper/pac-footer.sh \"{+}\"; fi)"
    --bind="focus:transform-preview-label(
                MODE=\$(<\"/tmp/fzf_mode.txt\")
                case \$MODE in
                    0|1) echo \"⎸ {1} ⎹\" ;;
                    2) echo \"⎸ {2} ⎹\" ;;
                esac
            )+preview(
                MODE=\$(cat /tmp/fzf_mode.txt)
                if [[ \$MODE == 2 ]]; then
                    paru -Qi {2}
                else
                    paru -Si {1}
                fi
            )"
    --color="info:#4C4F69,spinner:#4C4F69,border:#FAB387,label:#FAB387,prompt:#89B4FA,hl:#A6E3A1,hl+:#A6E3A1,input-border:#A6E3A1,input-label:#A6E3A1,footer-border:#4C4F69,footer-label:#4C4F69,footer-fg:#89B4FA,list-border:#CDD6F4,list-label:#CDD6F4,marker:#A6E3A1,preview-border:#89B4FA,preview-label:#89B4FA"
)

function split_list() {
    declare -a INSTALLED REPOS AUR

    while read -r REPO PACKAGE VERSION OPTIONAL; do
        if [[ "${OPTIONAL}" == *"[installed]"* ]]; then
            INSTALLED+=("${REPO} ${PACKAGE} ${OPTIONAL}")
        else
            if [[ "${REPO}" == "aur" ]]; then
                AUR+=("${PACKAGE} ${VERSION}")
            else
                REPOS+=("${PACKAGE} ${VERSION}")
            fi
        fi
    done

    printf '%s\n' "${INSTALLED[@]}" > "${FILES["installed"]}"
    printf '%s\n' "${REPOS[@]}" > "${FILES["repos"]}"
    printf '%s\n' "${AUR[@]}" > "${FILES["aur"]}"
}

split_list < <(paru -Sl)

echo "${START_MODE}" > "${FILES["mode"]}"

SELECTION="$(fzf "${FZF_ARGS[@]}" < "${FILES["repos"]}")"

if [[ -z "${SELECTION}" ]]; then
    echo "No packages were selected, exiting."
    exit 0
fi

# MODES:
# 0 - Repo packages
# 1 - AUR packages
# 2 - Installed packages
case "$(<"${FILES["mode"]}")" in
    0|1)
        SELECTION="$(echo "${SELECTION}" | cut -d " " -f 1)"
        paru -S "${SELECTION[@]}"
    ;;

    2)
        SELECTION="$(echo "${SELECTION}" | cut -d " " -f 2)"
        paru -Rns "${SELECTION[@]}"
    ;;

    *)
        echo "ERROR: Unknown mode ${MODE}."
        exit 1
    ;;
esac
